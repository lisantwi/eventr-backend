continue
render json: {user: @user}
                            token: token
                            user: @user,
                            message: "You are logging in...",
                            authenticated: true,
render json: {
       token: token
       user: @user,
       message: "You are logging in...",
       authenticated: true,
ender json: {
@user
continue
continuee
@user.to_json(user_serializer_options)
 render json: {user: @user.to_json(user_serializer_options), jwt: token}
continue
 render json: {user: @user.to_json(user_serializer_options), jwt: token}, status: :accepted
render json: {user: @user.to_json(user_serializer_options), jwt: token}, status: :accepted
continue
token
continue
token
continue
@user.authenticate(params[:user][:password])
@user.authenticare(params[:user][:password])
params[:user][:password]
params[:user]
params
@user.authenticate(password: params[:user][:password])
@user.authenticate(password: user_login_params[:password][:password])
@user.authenticate(password: user_login_params[:password])
@user.authenticate(password: user_login_params[:user][:password])
@user.authenticate(password: params[:user][:password])
@user.authenticate(password: params[:user][:password]
@user
continue
BCrypt::Password.new(self.password_digest) == plaintext_password[:password]
plaintext_password[:password]
plaintext_password[password]
plaintext_password
BCrypt::Password.new(self.password_digest) 
BCrypt::Password.new(self.password_digest) == plaintext_password
BCrypt::Password.new(self.password_digest) == plaintext_passwo
plaintext_password
continue
@user
continue
@user.authenticate(password: params[:password])
@user
continue
@user
continue
@user
continue
params[:user][:password]
@user.authenticate(password: params[:user][:password])
continue
@user.authenticate(password: params[:user][:password])
params[:user][:password]
@user.authenticate(password: params[:user][:password])
params[:user][:password]
params[:password]
params
@user.authenticate(password: params[:password])
@user.authenticate(password:user_login_params[:password])
@user
continue
@user
continue
params[:user]
params
continue
params
continue
 render json: e.activities
e.activities.last
e.activities.length
e.activities
new_activities.length
new_activities
continue
activities.count
activities
e
continue
e.activities
e.activities.count
e.activities
e
new_activities
continue
params[:_json][1][:id]
params[:_json][:id]
params[:_json][1]
e
activities.length
activities
continue
uri
continue
params[:_json][1][:interests].split(',').join('2%C')
params[:_json][1][:interests].split(',')
params[:_json][1][:interests].to_a
params[:_json][1][:interests].to_arr
 params[:_json][1][:interests].join('%2C')
params[:_json][1][:interests]
params[:_json][1].interests
params[:_json][0]
params[:_json].[0]
params[:_json]
params
continue
a
continue
a
continue
a
quit
continue
act[:id]
act.id
act
continue
!!!
!
params[:_json].count
params[:_json][0]
params[:_json]
params._json
params.json[0]
params
params.map(i => i.name)
params[0]
params
params[:json]
params['json']
params.data
params[0].json
params['json]
params
params.first
params['json']
params[:json]
params.json
params
params.map(arr => arr.name)
params[:arr]
params[0]
params
quit
response
uri
exit
continue
quit
!!!
exit
continue
result.map{|x| x.events.name}
result
result = user.to_json(user_serializer_options)
result = render json: user.to_json(user_serializer_options)
render json: user.to_json(user_serializer_options)
user
user = User.find(params[:id])
params
continue
รง
exit
e.split(",")
e.to_a
e
e =  params[:interests].join(',')
params[:interests].join(','
params[:interests].to_s
params[:interests]
params
continue
params[:interests]
params
e
exit
e
continue
      event.activities.create(name: event['name']['text'], link: event['url'], image: event['logo']['original']['url'], category: event['category_id'])}
 new_activities = activities.map{|event|   
continue
event
continue
exit
activities.count
activities
exit
params[:interests]
params[:name]
params
continue
new_activities
continue
event['category_id']
event['logo']['original']['url']
event['url']
event['name']['text']
event['name']
event.name
event[:name]
event
continue
selected_events.last
selected_events
continue
event['logo']['original']['url']
event['logo']['original']
event['url']
event['name']['text']
event['name'].text
event['name']
event.name
event
event = selected_events.first
selected_events.length
selected_events
continue
events['events'].sample(6)
events['events']
events[:events]
events.events
events = JSON.parse(response.body)
response.body.events
response
response.body
response.body[:events]
response.body.events
response.body
response
continue
url
continue
category_num
response
continue
response.body
response
continue
response
continue
response
continue
url
uri
response
continue
uri
response
